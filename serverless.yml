service: dns-sandbox
provider:
  name: aws
  runtime: nodejs12.x
  stage: "${opt:stage, 'stg'}"
  region: "${opt:region, 'ap-southeast-1'}"
  memorySize: 256
  environment:
    DOMAIN: ${self:custom.DOMAIN}
    HOSTED_ZONE_ID: ${self:custom.HOSTED_ZONE_ID}
    WAIT_TIME: ${self:custom.WAIT_TIME}
  tracing:
    lambda: true
    apiGateway: true
  # https://github.com/serverless/serverless/issues/6906
  #  logs:
  #    restApi: true
  iamRoleStatements:
    - Effect: Allow
      Action: ["route53:ChangeResourceRecordSets"]
      Resource:
        - "Fn::Join": ["", ["arn:aws:route53:::hostedzone/", "${self:custom.HOSTED_ZONE_ID}"]]
    - Effect: Allow
      Action: ["states:GetExecutionHistory"]
      Resource:
        - "Fn::Join": ["", ["arn:aws:states:*:*:execution:DomainStateMachine*"]]

functions:
  getExecutionName:
    description: "Get the domain name associated with the execution of a step machine."
    handler: index.getExecutionName
    environment:
      STATE_MACHINE_ARN: { "Ref": "DomainStateMachine" }
    events:
      - http:
          path: /execution/{executionId}
          method: GET
  create:
    description: "Create a DNS-TXT record."
    handler: index.create
  clean:
    description: "Delete a DNS-TXT record."
    handler: index.clean

stepFunctions:
  stateMachines:
    records:
      id: DomainStateMachine
      events:
        - http:
            path: /
            method: POST
            response:
              headers:
                Content-Type: "'application/json'"
              template:
                application/json: |
                  {
                    "executionId": "$input.json('$.executionArn').split(':')[7].replace('"', "")"
                  }
      definition:
        Comment: "An example of the Amazon States Language using wait states"
        StartAt: CreateRecord
        States:
          CreateRecord:
            Type: Task
            Resource:
              Fn::GetAtt: [create, Arn]
            Next: Wait
          Wait:
            Type: Wait
            Seconds: ${self:custom.WAIT_TIME}
            Next: DeleteRecord
          DeleteRecord:
            Type: Task
            Resource:
              Fn::GetAtt: [clean, Arn]
            End: true
custom:
  DOMAIN: ${env:DOMAIN}
  HOSTED_ZONE_ID: ${env:HOSTED_ZONE_ID}
  # change to seven days later 604800
  WAIT_TIME: ${env:WAIT_TIME, 3600}

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-plugin-typescript
